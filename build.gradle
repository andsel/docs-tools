/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
	id 'org.ajoberstar.grgit' version '1.6.0'
}

apply plugin: "java"
apply plugin: 'org.ajoberstar.grgit'

import ChangeBranchTask
import GitCloneTask
import org.ajoberstar.grgit.Grgit

task cloneLogstash(type: GitCloneTask) {
	uri = "git@github.com:/elastic/logstash.git"
}

task cloneLogstashDocs(type: GitCloneTask) {
	uri = "git@github.com:/elastic/logstash-docs.git"
}

task cloneDocs(type: GitCloneTask) {
	uri = "git@github.com:/elastic/docs.git"
}

// Generate tasks based on the 'branches' property
if (!hasProperty("branches")) {
  throw new GradleException("Missing required property 'branches'. Add this flag to your command: `-Pbranches=foo,bar,baz` where the value is a comma-separated list of branches you want to work on.")
}

task buildAll
task publishAll

Closure skipIfNoChanges = { ->
	// Skip this task if there are no changes in docs.
	def logstashDocs = Grgit.open("${project.buildDir}/elastic/logstash-docs")
	def status = logstashDocs.status()
	if (status.unstaged.getAllChanges().size() == 0) {
		println "Skipping build${name}. No changes detected."
		throw new StopExecutionException("Skipping build")
	}
}

branches.split(",").each { name ->
	task "branch${name}"(type: ChangeBranchTask, dependsOn: [ cloneLogstashDocs, cloneLogstash ]) {
		branch = name
	}

	task "copyStatic${name}"(type: Sync, dependsOn: "branch${name}") {
		description "Sync documentation from sources"
		from "${buildDir}/elastic/logstash/docs/static/"
		into "${buildDir}/elastic/logstash-docs/docs/static/"
	}

	task "copyIndex${name}"(type: Copy, dependsOn: "branch${name}") {
		description "Sync documentation from sources"
		from "${buildDir}/elastic/logstash/docs/"
		into "${buildDir}/elastic/logstash-docs/docs/"
    include "index.asciidoc"
	}

  task "copy${name}"(dependsOn: [ "copyIndex${name}", "copyStatic${name}" ])

	task "build${name}"(type: Exec, dependsOn: [ "copy${name}", cloneDocs ]) {
		description "Run the build_docs script."
		def build_docs_pl = "${buildDir}/elastic/docs/build_docs.pl"
		workingDir "${buildDir}/elastic/logstash-docs/docs"
		commandLine build_docs_pl, "--doc", "index.asciidoc", "--chunk=1"
		doFirst(skipIfNoChanges)
	}

	task "commit${name}"(dependsOn: [ "build${name}" ]) {
		doFirst(skipIfNoChanges)
		description "Create a git commit for any copied docs"
	} << {
		def logstash = Grgit.open("${project.buildDir}/elastic/logstash")
		def logstashDocs = Grgit.open("${project.buildDir}/elastic/logstash-docs")
		def originCommit = logstash.resolve.toCommit("HEAD").id

		def status = logstashDocs.status()
		if (status.unstaged.added.size() > 0) {
			println "Adding new files: ${status.unstaged.added}"
			logstashDocs.add(patterns: status.unstaged.added)
		}
		if (status.unstaged.removed.size() > 0) {
			println "Removing deleted files: ${status.unstaged.removed}"
			logstashDocs.add(patterns: status.unstaged.removed)
		}
		if (status.unstaged.modified.size() > 0) {
			println "Adding modified files: ${status.unstaged.modified}"
			logstashDocs.add(patterns: status.unstaged.modified)
		}
		logstashDocs.commit(message: "Sync from elastic/logstash@${originCommit}")
	}

	task "publish${name}"(dependsOn: [ "commit${name}" ]) {
		description "Publish docs changes to the logstash-docs git repo"
	} << {
		def logstashDocs = Grgit.open("${project.buildDir}/elastic/logstash-docs")
		println("Publishing branch ${name} to elastic/logstash-docs")
		logstashDocs.push()
	}

	buildAll.dependsOn "build${name}"
	publishAll.dependsOn "publish${name}"
}

build.dependsOn(buildAll)
task publish(dependsOn: publishAll)
